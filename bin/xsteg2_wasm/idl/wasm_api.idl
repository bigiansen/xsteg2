[Prefix="xsteg::"]
interface pixel_availability
{
    void pixel_availability(long r, long g, long b, long a);
    attribute long bits_r;
    attribute long bits_g;
    attribute long bits_b;
    attribute long bits_a;
    attribute boolean ignore_r;
    attribute boolean ignore_g;
    attribute boolean ignore_b;
    attribute boolean ignore_a;
};

[Prefix="xsteg::"]
interface encoding_options
{
    void encoding_options(long offset);
    attribute long first_pixel_offset;
};

interface fixed_vector_u8
{
    void fixed_vector_u8(long len);
    octet at(long index);
    long size();
};

enum visual_data_type
{
    "visual_data_type::CHANNEL_RED",
    "visual_data_type::CHANNEL_GREEN",
    "visual_data_type::CHANNEL_BLUE",
    "visual_data_type::CHANNEL_ALPHA",
    "visual_data_type::AVERAGE_RGB",
    "visual_data_type::AVERAGE_RGBA",
    "visual_data_type::SATURATION",
    "visual_data_type::LUMINANCE",
    "visual_data_type::CHANNEL_SUM_SATURATED"
};

[Prefix="xsteg::"]
interface threshold
{
    void threshold(visual_data_type vdt, boolean inv, float val, [Ref] pixel_availability pxav);
    attribute visual_data_type type;
    attribute boolean inverted;
    attribute float value;
    [Value] attribute pixel_availability availability;
};

[Prefix="ien::"]
interface image
{
    void image(octet[] data, long w, long h);
    void image([Const, Ref] image img);
    long pixel_count();
    void save_to_file_png(DOMString path, long compression_level);
};

[Prefix="ien::"]
interface packed_image
{
    void packed_image();
    void packed_image([Const, Ref] packed_image img);
    long pixel_count();
    [Value] image to_image();
    void save_to_file_png(DOMString path, long compression_level);
};

[Prefix="xsteg::"]
interface steganographer
{
    void steganographer([Const, Ref] image img);
    void add_threshold([Ref] threshold thres, boolean apply);
    void clear_thresholds();
    long available_size_bytes([Ref] encoding_options eopts);
    [Value] image encode(octet[] data, long len, [Ref] encoding_options eopts);
    [Value] packed_image gen_availability_map_image([Const, Ref] threshold_stdvector thresholds);
};

interface threshold_stdvector
{
    void threshold_stdvector();
    long size();
    [Ref] threshold at(long idx);
    void push_back([Const, Ref] threshold th);
};

interface ex_helper
{
    void ex_helper();
    [Const] DOMString get_exception_msg(long exptr);
};